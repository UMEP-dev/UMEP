import unittest
import numpy as np
# from shadowingfunction_wallheight_13 import shadowingfunction_wallheight_13
from shadowingfunction_wallheight_mr import shadowingfunction_wallheight_13


# class Test_Shadow(unittest.TestCase):
class Shadow():
    # def setUp(self):
    def __init__(self):
        import Utilities.misc
        self.dsm = np.array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 5., 5., 5., 5., 1., 1.],
                             [1., 1., 4., 4., 4., 4., 4., 1., 1., 1., 5., 5., 5., 5., 1., 1.],
                             [1., 1., 4., 4., 4., 4., 1., 1., 1., 1., 5., 5., 5., 5., 1., 1.],
                             [1., 1., 4., 4., 4., 1., 1., 1., 1., 1., 5., 5., 5., 5., 1., 1.],
                             [1., 1., 4., 4., 1., 1., 1., 1., 1., 1., 5., 5., 5., 5., 1., 1.],
                             [1., 1., 4., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])
        self.walls = np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 4., 4., 4., 4., 0., 0.],
                               [0., 0., 3., 3., 3., 3., 3., 0., 0., 0., 4., 0., 0., 4., 0., 0.],
                               [0., 0., 3., 0., 0., 3., 0., 0., 0., 0., 4., 0., 0., 4., 0., 0.],
                               [0., 0., 3., 0., 3., 0., 0., 0., 0., 0., 4., 0., 0., 4., 0., 0.],
                               [0., 0., 3., 3., 0., 0., 0., 0., 0., 0., 4., 4., 4., 4., 0., 0.],
                               [0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                               [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
        self.aspect = np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0.,   0.,   0.,   0.,   0.,   0., 0., 0., 0., 270.,   0.,   0., 90., 0., 0.],
                                [0., 0., 270.,  11.,  11.,  11., 135., 0., 0., 0., 270.,   0.,   0., 90., 0., 0.],
                                [0., 0., 270.,   0.,   0., 135.,   0., 0., 0., 0., 270.,   0.,   0., 90., 0., 0.],
                                [0., 0., 270.,   0., 135.,   0.,   0., 0., 0., 0., 270.,   0.,   0., 90., 0., 0.],
                                [0., 0., 270., 135.,   0.,   0.,   0., 0., 0., 0., 180., 180., 180., 135., 0., 0.],
                                [0., 0., 135.,   0.,   0.,   0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
        self.scale = 1
        # self.dsm = np.array([[.5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5],
        #                      [.5, .5, .5, .5, .5, .5, 5., .5, .5, .5, .5],
        #                      [.5, .5, .5, .5, 4., .5, .5, 5., .5, .5, .5],
        #                      [.5, .5, .5, 4., .5, .5, .5, .5, 5., .5, .5],
        #                      [.5, .5, 4., .5, .5, .5, .5, .5, .5, 5., .5],
        #                      [.5, 4., .5, .5, .5, .5, .5, .5, .5, .5, .5],
        #                      [.5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5]])
        #
        # self.aspect = np.array([[0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0],
        #                         [0,  0,  0,  0,  0,  0, 225, 0,  0,  0, 0],
        #                         [0,  0,  0,  0, 135, 0,  0, 225, 0,  0, 0],
        #                         [0,  0,  0, 135, 0,  0,  0,  0, 225, 0, 0],
        #                         [0,  0, 135, 0,  0,  0,  0,  0,  0, 225, 0],
        #                         [0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
        #
        # self.walls = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #                        [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0],
        #                        [0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0],
        #                        [0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0],
        #                        [0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0],
        #                        [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

        self.alt = np.array([ 5, 30, 60, 10])
        self.azi = np.array([90, 90, 90, 90])
        # self.alt = np.array([20, 15, 50, 15])
        # self.azi = np.array([90, 135, 170, 280])

    def test_slope_buildshadow(self):
        deg2rad = np.pi / 180
        for i in range(4):
            alt = self.alt[i]
            sh, wallsh, wallsun, facesh, facesun = shadowingfunction_wallheight_13(self.dsm, self.azi[i],
                                                                                   self.alt[i], self.scale, self.walls,
                                                                                   self.aspect * deg2rad)
            (alt, sh, wallsh, wallsun, facesh, facesun) * 1
            # print("alt\n", alt)
            # print("\n azi: %d, alt: %d" % (self.azi[i], self.alt[i]))
            # print("sh\n", sh)
            # print("wallsh\n", wallsh)
            # print("wallsun\n", wallsun)
            # print("facesh\n", facesh)
            # print("facesun\n", facesun)

        # self.assertTrue(True)
    def test_slope_groundreflect(self):
        # inva = np.copy(self.dsm * (-1))
        # aquer = (inva + np.max(self.dsm) - np.max(inva))
        # aquer = np.copy(self.dsm * (-1))
        deg2rad = np.pi / 180
        for i in range(4):
            alt = self.alt[i]
            sh, wallsh, wallsun, facesh, facesun, wallgndr = shadowingfunction_wallheight_13(self.dsm, self.azi[i],
                                                                                   self.alt[i], self.scale, self.walls,
                                                                                   self.aspect * deg2rad)
            wallgndr = wallgndr - self.dsm + self.walls
            wallsun = np.where(wallsun < 0, 0., np.copy(wallsun))
            (alt, sh, wallsh, wallsun, facesh, facesun, wallgndr)*1


if __name__ == '__main__':
    # unittest.main()
    t = Shadow()
    t.test_slope_groundreflect()
    # t.test_slope_buildshadow()
